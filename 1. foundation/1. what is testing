
# What is software testing?
 Software Testing is the investigative process that ensures the software behaves correctly, consistently, and
 safely, under expected and unexpected scenarios — before real users interact with it.

It’s not just checking "does it work?"
It’s asking:

Does it work under pressure?
Does it handle bad inputs well?
Does it break when I change something unrelated?
Will this impact the user’s trust?

# 🔧 Manual vs Automation: What You Need to Know First
Aspect	                                Manual Testing	                                 Automation Testing
Who Does It?                 	Manual Testers, QA Analysts                           	SDETs, QA Engineers
Tools                        	Test cases, mind, UI	                                  Selenium, Cypress, Postman
When Used?                   	Early career, UI/UX flows, exploratory testing        	Repeated tests, regression, performance
Learning Curve                Beginner-friendly             	                        Requires programming knowledge
Value?	                      High in startups, user-centric flows	                  High in CI/CD-heavy projects

👉 In reality, 90% of companies still need manual testing for:

Unstable UIs
Frequent changes
User experience testing
Exploratory testing
Critical workflows

Manual testing isn't dying — bad testing is.
\\

🔁 Why Testing is Not Just Clicking Buttons
Let’s look at two testers:

👎 Tester A:

Opens the app
Clicks buttons randomly
Says “It worked!”

👍 Tester B:

Reads the requirements
Analyzes input types (what if I enter emojis? SQL commands?)
Tests it in dark mode, on slow internet, logged out, in airplane mode
Finds 6 serious bugs missed by devs

Both testers “used the app.” But only one protected the company.

✅ Real Example:
Flipkart cart page: A tester added the same product 999 times to test overflow → UI broke, price mismatched. 
That bug saved the company embarrassment.

\\

# 🧠 What Makes a Good Manual Tester (Deep Traits)
Trait                                           	Why It Matters
Curiosity                                   	Helps you test beyond the obvious
Empathy	                                      Understand how real users will use (and misuse) the app
Communication	                                You’ll explain bugs to devs & managers
Patience	                                    Reproducing bugs can be painful
Logical thinking	                            Essential for test case design
Attention to detail                         	You’ll spot things others miss
Creativity	                                  Great testers don’t follow checklists blindly

\\

# 📚 QA vs QC vs Testing – Often Confused 

Term	                                  Meaning                                                    	Real-world Analogy
QA – Quality Assurance	      Preventing defects during development. Focus = process.          	Reviewing the recipe before cooking
QC – Quality Control	        Identifying defects in the final product. Focus = product.      	Tasting the dish before serving
Testing	                      The actual activity of executing tests and reporting bugs       	Testing each ingredient while cooking

👉 QA = Prevent, QC = Detect, Testing = Execute

\\

# ✅ Verification vs Validation 

Term	                            Means	                                    Real-world Case
Verification            	Are we building it right?	                  Did we follow the Figma design exactly?
Validation	              Are we building the right thing?	          Does this solve the user’s real pain point?

Case Study:

Banking app shows ₹10000 balance on home screen but transaction history shows ₹0 →

Verified: Design matches UI
Validated: Big failure! Balance display is misleading users

\\

